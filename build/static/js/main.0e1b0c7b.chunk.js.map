{"version":3,"sources":["components/containers/Header.js","components/views/HomePageView.js","components/containers/HomePageContainer.js","store/actions/actionTypes.js","store/thunks.js","store/actions/actionCreators.js","components/views/AllCampusesView.js","components/containers/AllCampusesContainer.js","components/views/AllStudentsView.js","components/views/NewStudentView.js","components/views/CampusView.js","components/views/StudentView.js","components/containers/CampusContainer.js","components/containers/AllStudentsContainer.js","components/containers/StudentContainer.js","components/containers/NewStudentContainer.js","components/views/NewCampusView.js","components/containers/NewCampusContainer.js","App.js","reportWebVitals.js","store/reducers/campuses.js","store/reducers/campus.js","store/reducers/students.js","store/reducers/student.js","store/index.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","title","textAlign","fontType","fontFamily","fontSize","color","appBar","backgroundColor","shadows","greeting","display","justifyContent","width","margin","links","textDecoration","Header","classes","_jsx","className","children","AppBar","position","elevation","_jsxs","Toolbar","Typography","variant","Link","to","Button","style","marginRight","HomePageView","HomePageContainer","FETCH_ALL_CAMPUSES","ADD_CAMPUS","DELETE_CAMPUS","EDIT_CAMPUS","FETCH_CAMPUS","FETCH_ALL_STUDENTS","ADD_STUDENT","DELETE_STUDENT","EDIT_STUDENT","FETCH_STUDENT","axios","require","fetchAllCampusesThunk","async","res","get","dispatch","campuses","data","type","at","payload","err","console","error","addCampusThunk","campus","post","ac","fetchCampusThunk","id","fetchAllStudentsThunk","students","addStudentThunk","student","deleteStudentThunk","studentId","delete","fetchStudentThunk","AllCampusesView","_ref","allCampuses","length","map","name","src","imageUrl","alt","height","AllCampusesContainer","Component","componentDidMount","this","props","fetchAllCampuses","render","connect","state","AllStudentsView","deleteStudent","firstName","lastName","onClick","formContainer","borderRadius","padding","boxShadow","customizeAppBar","formTitle","marginBottom","formField","buttonContainer","marginTop","NewStudentView","handleChange","handleSubmit","fontWeight","onSubmit","e","TextField","label","onChange","required","inputProps","step","min","max","helperText","FormControl","InputLabel","Select","labelId","MenuItem","value","FormHelperText","component","CampusView","address","description","StudentView","CampusContainer","fetchCampus","match","params","AllStudentsContainer","constructor","arguments","handleDelete","fetchAllStudents","allStudents","withRouter","StudentContainer","fetchStudent","NewStudentContainer","super","event","setState","target","preventDefault","firstname","lastname","email","gpa","parseFloat","isNaN","undefined","campusId","newStudent","addStudent","redirect","redirectId","componentWillUnmount","Redirect","NewCampusView","errors","values","multiline","rows","NewCampusContainer","validateField","trim","URL","validateForm","valid","forEach","field","prevState","newCampus","addCampus","submitError","App","Switch","Route","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","action","filter","initialState","rootReducer","combineReducers","reducers","logger","createLogger","collapsed","store","createStore","applyMiddleware","thunk","ReactDOM","React","StrictMode","Provider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.0e1b0c7b.chunk.js","sourcesContent":["/*==================================================\nHeader.js\n\nIt contains the Header component to be displayed on every page.\nThe header contains navigation links to every other page.\n================================================== */\n// Import \"material\" library for building UI with React components\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { Link } from 'react-router-dom';\n\n// Define styling for the header\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    flexGrow: 1,\n    textAlign: 'left',\n    fontType: 'bold',\n    fontFamily: 'sans-serif', \n    fontSize: '35px', \n    color: 'darkblue'\n  },\n  appBar:{\n    backgroundColor: '#fcb6bb',\n    shadows: ['none'],\n  },\n  greeting:{\n    display: 'flex',\n    justifyContent: 'center',\n    backgroundColor: 'white',\n    width: \"50%\",\n    margin: \"auto\",\n  },\n  links:{\n    textDecoration: 'none',\n  }\n}));\n\n// Header component, displayed on every page\n// Links to every other page\nconst Header = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" elevation={0} className={classes.appBar}>\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title} color=\"inherit\" >\n            Campus Management System\n          </Typography>\n\n          <Link className={classes.links} to={'/'} >\n            <Button variant=\"contained\" color=\"primary\" style={{marginRight: '10px'}}>\n              Home\n            </Button>\n          </Link>\n\n          <Link className={classes.links} to={'/campuses'} >\n            <Button variant=\"contained\" color=\"primary\" style={{marginRight: '10px'}}>\n              All Campuses\n            </Button>\n          </Link>\n\n          <Link className={classes.links} to={'/students'} >\n            <Button variant=\"contained\" color=\"primary\">\n              All Students\n            </Button>\n          </Link>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );    \n}\n\nexport default Header;\n","/*==================================================\nHomePageView.js\n\nThe Views component is responsible for rendering web page with data provided by the corresponding Container component.\nIt constructs a React component to display the home page.\n================================================== */\nconst HomePageView = () => {\n  // Render Home page view\n  return (\n    <div >\n      <h1>Home Page</h1>\n    </div>\n  );    \n}\n\nexport default HomePageView;","/*==================================================\nHomePageContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport HomePageView from '../views/HomePageView';\n\n// Render Home page view by the corresponding View component\nconst HomePageContainer = () => {\n  return (\n    <div>\n      <Header />\n      <HomePageView />\n    </div>\n    \n  );\n};\n\nexport default HomePageContainer;","// ACTION TYPES;\n\n//All campuses\nexport const FETCH_ALL_CAMPUSES = \"FETCH_ALL_CAMPUSES\";\nexport const ADD_CAMPUS = \"ADD_CAMPUS\";\nexport const DELETE_CAMPUS = \"DELETE_CAMPUS\";\nexport const EDIT_CAMPUS = \"EDIT_CAMPUS\";\n\n//Single campus\nexport const FETCH_CAMPUS = \"FETCH_CAMPUS\";\n\n//All students\nexport const FETCH_ALL_STUDENTS = \"FETCH_ALL_STUDENTS\";\nexport const ADD_STUDENT = \"ADD_STUDENT\";\nexport const DELETE_STUDENT = \"DELETE_STUDENT\";\nexport const EDIT_STUDENT = \"EDIT_STUDENT\";\n\n//Single student\nexport const FETCH_STUDENT = \"FETCH_STUDENT\";","/*==================================================\n/src/store/thunks.js\n\nIt contains all Thunk Creators and Thunks.\n================================================== */\nimport * as ac from './actions/actionCreators';  // Import Action Creators (\"ac\" keyword Action Creator)\nconst axios = require('axios'); // Import axios for API calls\n\n//All Campuses\n// THUNK CREATOR:\nexport const fetchAllCampusesThunk = () => async (dispatch) => {  // The THUNK\n  try {\n    // API \"get\" call to get \"campuses\" data from database\n    const res = await axios.get(`/api/campuses`);  \n    // Call Action Creator to return Action object (type + payload with \"campuses\" data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllCampuses(res.data));\n  }\n  // Handle error\n  catch(err) {\n    console.error('Error fetching campuses:', err);\n  }\n};\n\n// Add Campus\n// THUNK CREATOR:\nexport const addCampusThunk = (campus) => async (dispatch) => {  // The THUNK\n  try {\n    // API \"post\" call to add \"campus\" object's data to database\n    const res = await axios.post(`/api/campuses`, campus);  \n    // Call Action Creator to return Action object (type + payload with new campus data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.addCampus(res.data));\n    return res.data; \n  } \n  // Handle error\n  catch(err) {\n    console.error('Error adding campus:', err);\n    throw err; // Re-throw the error so we can handle it in the component\n  }\n};\n\n// Delete Campus\n// THUNK CREATOR:\nexport const deleteCampusThunk = campusId => async dispatch => {  // The THUNK\n  try {\n    // API \"delete\" call to delete campus (based on \"campusId\") from database\n    await axios.delete(`/api/campuses/${campusId}`);  \n    // Delete successful so change state with dispatch\n    dispatch(ac.deleteCampus(campusId));\n  }\n  // Handle error\n  catch(err) {\n    console.error('Error deleting campus:', err);\n  }\n};\n\n// Edit Campus\n// THUNK CREATOR:\nexport const editCampusThunk = (campus) => async (dispatch) => {\n  try {\n    // Send PUT and pull the updated record from response.data\n    const response = await axios.put(`/api/campuses/${campus.id}`, campus);\n    const updated = response.data;\n\n    // Dispatch only the updated campus object (not the full response)\n    dispatch(ac.editCampus(updated));\n\n    // Return updated if you need to chain promises\n    return updated;\n  } \n  // Handle error\n  catch (err) {\n    console.error('Error editing campus:', err);\n  }\n};\n\n// Single Campus\n// THUNK CREATOR:\nexport const fetchCampusThunk = (id) => async (dispatch) => {  // The THUNK\n  try {\n    // API \"get\" call to get a campus data (based on \"id\") from database\n    const res = await axios.get(`/api/campuses/${id}`);  \n    dispatch(ac.fetchCampus(res.data));\n  } \n  // Handle error\n  catch(err) {\n    console.error('Error fetching campus:', err);\n  }\n};\n\n// All Students\n// THUNK CREATOR:\nexport const fetchAllStudentsThunk = () => async (dispatch) => {  // The THUNK\n  try {\n    // API \"get\" call to get \"students\" data from database\n    const res = await axios.get(`/api/students`);  \n    // Call Action Creator to return Action object (type + payload with \"students\" data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllStudents(res.data));  \n  } \n  // Handle error\n  catch(err) {\n    console.error('Error fetching students:', err);\n  }\n};\n\n// Add Student\n// THUNK CREATOR:\nexport const addStudentThunk = (student) => async (dispatch) => {  // The THUNK\n  try {\n    // API \"post\" call to add \"student\" object's data to database\n    const res = await axios.post(`/api/students`, student);  \n    // Call Action Creator to return Action object (type + payload with new students data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.addStudent(res.data));\n    return res.data; \n  } \n  // Handle error\n  catch(err) {\n    console.error('Error adding student:', err);\n  }\n};\n\n// Delete Student\n// THUNK CREATOR:\nexport const deleteStudentThunk = studentId => async dispatch => {  // The THUNK\n  try {\n    // API \"delete\" call to delete student (based on \"studentID\") from database\n    await axios.delete(`/api/students/${studentId}`);  \n    // Delete successful so change state with dispatch\n    dispatch(ac.deleteStudent(studentId));\n  }\n  // Handle error\n  catch(err) {\n    console.error('Error deleting student:', err);\n  }\n};\n\n// Edit Student\n// THUNK CREATOR:\nexport const editStudentThunk = (student) => async (dispatch) => {\n  try {\n    // 1. Send PUT and pull the updated record from response.data\n    const response = await axios.put(`/api/students/${student.id}`, student);\n    const updated = response.data;\n\n    // 2. Dispatch only the updated student object (not the full response)\n    dispatch(ac.editStudent(updated));\n\n    // Return updated if you need to chain promises\n    return updated;\n  } \n  // Handle error\n  catch (err) {\n    console.error('Error editing student:', err);\n  }\n};\n\n// Single Student\n// THUNK CREATOR:\nexport const fetchStudentThunk = id => async dispatch => {  // The THUNK\n  try {\n    // API \"get\" call to get a specific student (based on \"id\") data from database\n    const res = await axios.get(`/api/students/${id}`);  \n    // Call Action Creator to return Action object (type + payload with student data)\n    // Then dispatch the Action object to Reducer to display student data \n    dispatch(ac.fetchStudent(res.data));\n  } \n  // Handle error\n  catch(err) {\n    console.error('Error fetching student:', err);\n  }\n};\n","import * as at from './actionTypes';\n\n// ACTION CREATORS;\n/** needs to be an action creator\n * for each action type\n */\n\n// All Campuses \nexport const fetchAllCampuses = (campuses) => ({\n  type: at.FETCH_ALL_CAMPUSES,\n  payload: campuses, // array of campuses\n});\n\n// Add Campus\nexport const addCampus = (campus) => ({\n  type: at.ADD_CAMPUS,\n  payload: campus, // new campus object\n});\n\n// Delete Campus\nexport const deleteCampus = (campusId) => ({\n  type: at.DELETE_CAMPUS,\n  payload: campusId, // campus ID to delete\n});\n\n// Edit Campus\nexport const editCampus = (campus) => ({\n  type: at.EDIT_CAMPUS,\n  payload: campus, // campus object with updated data\n});\n\n// Single Campus\nexport const fetchCampus = (campus) => ({\n  type: at.FETCH_CAMPUS,\n  payload: campus, // single campus object\n});\n\n// All Students\nexport const fetchAllStudents = (students) => ({\n  type: at.FETCH_ALL_STUDENTS,\n  payload: students, // array of students\n});\n\n// Add Student\nexport const addStudent = (student) => ({\n  type: at.ADD_STUDENT,\n  payload: student, // new student object\n});\n\n// Delete Student\nexport const deleteStudent = (studentId) => ({\n  type: at.DELETE_STUDENT,\n  payload: studentId, // student ID to delete\n});\n\n// Edit Student\nexport const editStudent = (student) => ({\n  type: at.EDIT_STUDENT,\n  payload: student, // student object with updated data\n});\n\n// Fetch Student\nexport const fetchStudent = (student) => ({\n  type: at.FETCH_STUDENT,\n  payload: student, // single student object\n});","/*==================================================\nAllCampusesView.js\n\nThe Views component is responsible for rendering web page with data provided by the corresponding Container component.\nIt constructs a React component to display all campuses.\n================================================== */\n// Import react and react-router-dom necessary libraries\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\n\nconst AllCampusesView = ({ allCampuses }) => (\n  <div>\n\n    {allCampuses.length === 0 ? (\n      <p>There are no campuses yet.</p>\n    ) : (\n      <div className=\"campus-list\">\n        {allCampuses.map((campus) => (\n          <div key={campus.id} className=\"campus-item\">\n            <Link to={`/campus/${campus.id}`}>\n              <h3>{campus.name}</h3>\n            </Link>\n            <img\n              src={campus.imageUrl || \"/default-campus.png\"}\n              alt={campus.name}\n              width=\"200\"\n              height=\"150\"\n            />\n          </div>\n        ))}\n      </div>\n    )}\n\n    {/* always visible */}\n    <br />\n    <Link to=\"/campuses/new\">\n      <button>Add New Campus</button>\n    </Link>\n    <br />\n    <br />\n  </div>\n);\n\nAllCampusesView.propTypes = {\n  allCampuses: PropTypes.array.isRequired,\n};\n\nexport default AllCampusesView;","/*==================================================\n/src/components/containers\\AllCampusesContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\n// Import react and redux necessary libraries\nimport Header from './Header';\nimport { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { fetchAllCampusesThunk } from \"../../store/thunks\";\nimport AllCampusesView from \"../views/AllCampusesView\";\n\n// The AllCampusesContainer component is a container component that fetches all campuses data\nclass AllCampusesContainer extends Component {\n  // Get all campuses data from back-end database\n  componentDidMount() {\n    // When the component mounts, kick off the thunk to load campuses\n    this.props.fetchAllCampuses();\n  }\n\n  // Render All Campuses view by passing all campuses data as props to the corresponding View component\n  render() {\n    const { allCampuses } = this.props;\n    return (\n      <div>\n        <Header />\n        {/* Pass the array of campuses down to the View for rendering */}\n        <AllCampusesView allCampuses={allCampuses} />\n      </div>\n    );\n  }\n}\n\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allCampuses\".\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\nconst mapState = (state) => ({\n  allCampuses: state.allCampuses,  // Get the State object from Reducer \"allCampuses\"\n});  \n\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => ({\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()), // Fetch all campuses data from server side\n});\n\n// Type check props;\nAllCampusesContainer.propTypes = {\n  allCampuses: PropTypes.array.isRequired, // Array of all campuses\n  fetchAllCampuses: PropTypes.func.isRequired, // Function to fetch all campuses\n};\n\n// Export store-connected container by default\n// AllCampusesContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(AllCampusesContainer);","/*==================================================\nAllStudentsView.js\n\nThe Views component is responsible for rendering web page with data provided by the corresponding Container component.\nIt constructs a React component to display the all students view page.\n================================================== */\n// Import react and necessary libraries\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\n\n// Take in props data to construct the component\nconst AllStudentsView = ({ students, deleteStudent }) => {\n  // If there are no students yet, show a prompt\n  if (!students.length) {\n    return (\n      <div>\n        <p>There are no students.</p>\n        <Link to=\"/newstudent\"> {/* Link to your \"Add Student\" form */}\n          <button>Add New Student</button>\n        </Link>\n      </div>\n    );\n  }\n  \n  // If there is at least one student, render All Students view \n  return (\n    <div>\n      <h1>All Students</h1>\n      <div className=\"student-list\">\n        {students.map((student) => (\n          <div key={student.id} className=\"student-item\">\n            {/* Link into the Single Student page */}\n            <Link to={`/student/${student.id}`}>\n              <h3>{student.firstName} {student.lastName}</h3>\n            </Link>\n            {/* Delete student button */}\n            <button onClick={() => deleteStudent(student.id)}>\n              Delete\n            </button>\n          </div>\n        ))}\n      </div>\n\n      <br />\n      {/* Link to your \"Add Student\" form */}\n      <Link to=\"/newstudent\">\n        <button>Add New Student</button>\n      </Link>\n      <br />\n      <br />\n    </div>\n  );\n};\n\n// Validate data type of the props passed to component.\nAllStudentsView.propTypes = {\n  students: PropTypes.array.isRequired, // Array of student objects\n  deleteStudent: PropTypes.func.isRequired, // Function to delete a student\n};\n\n// Export the component for use in other parts of the application\nexport default AllStudentsView;","/*==================================================\nNewStudentView.js\n\nThe Views component is responsible for rendering web page with data provided by the corresponding Container component.\nIt constructs a React component to display the new student page.\n================================================== */\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\n// Create styling for the input form\nconst useStyles = makeStyles(() => ({\n  formContainer: {\n    width: '500px',\n    backgroundColor: '#f0f0f5',\n    borderRadius: '5px',\n    margin: 'auto',\n    padding: '20px',\n    boxShadow: '0px 0px 5px 0px rgba(0,0,0,0.15)'\n  },\n  title: {\n    flexGrow: 1,\n    textAlign: 'left',\n    textDecoration: 'none'\n  },\n  customizeAppBar: {\n    backgroundColor: '#11153e',\n    shadows: ['none'],\n  },\n  formTitle: {\n    backgroundColor: '#c5c8d6',\n    marginBottom: '15px',\n    textAlign: 'center',\n    borderRadius: '5px 5px 0px 0px',\n    padding: '10px'\n  },\n  formField: {\n    marginBottom: '15px',\n    width: '100%'\n  },\n  buttonContainer: {\n    marginTop: '20px',\n    display: 'flex',\n    justifyContent: 'space-between'\n  }\n}));\n\nconst NewStudentView = (props) => {\n  const { handleChange, handleSubmit, allCampuses } = props;\n  const classes = useStyles();\n\n  // Render a New Student view with an input form\n  return (\n    <div>\n      <h1>New Student</h1>\n\n      <div className={classes.root}>\n        <div className={classes.formContainer}>\n          <div className={classes.formTitle}>\n            <Typography style={{ fontWeight: 'bold', fontFamily: 'Courier, sans-serif', fontSize: '20px', color: '#11153e' }}>\n              Add a Student\n            </Typography>\n          </div>\n          <form style={{ textAlign: 'left' }} onSubmit={(e) => handleSubmit(e)}>\n            <TextField\n              className={classes.formField}\n              label=\"First Name\"\n              name=\"firstname\"\n              variant=\"outlined\"\n              onChange={(e) => handleChange(e)}\n              required\n            />\n\n            <TextField\n              className={classes.formField}\n              label=\"Last Name\"\n              name=\"lastname\"\n              variant=\"outlined\"\n              onChange={(e) => handleChange(e)}\n              required\n            />\n\n            <TextField\n              className={classes.formField}\n              label=\"Email\"\n              name=\"email\"\n              variant=\"outlined\"\n              type=\"email\"\n              onChange={(e) => handleChange(e)}\n              required\n            />\n\n            <TextField\n              className={classes.formField}\n              label=\"GPA\"\n              name=\"gpa\"\n              variant=\"outlined\"\n              type=\"number\"\n              inputProps={{ step: \"0.1\", min: \"0\", max: \"4.0\" }}\n              onChange={(e) => handleChange(e)}\n              required\n              helperText=\"Enter a value between 0.0 and 4.0\"\n            />\n\n            <TextField\n              className={classes.formField}\n              label=\"Image URL\"\n              name=\"imageUrl\"\n              variant=\"outlined\"\n              onChange={(e) => handleChange(e)}\n              helperText=\"Optional: Enter URL for student's profile image\"\n            />\n\n            <FormControl variant=\"outlined\" className={classes.formField}>\n              <InputLabel id=\"campus-select-label\">Campus</InputLabel>\n              <Select\n                labelId=\"campus-select-label\"\n                id=\"campus-select\"\n                name=\"campusId\"\n                onChange={(e) => handleChange(e)}\n                label=\"Campus\"\n              >\n                <MenuItem value=\"\">\n                  <em>None</em>\n                </MenuItem>\n                {allCampuses && allCampuses.map((campus) => (\n                  <MenuItem key={campus.id} value={campus.id}>\n                    {campus.name}\n                  </MenuItem>\n                ))}\n              </Select>\n              <FormHelperText>Select a campus (optional)</FormHelperText>\n            </FormControl>\n\n            <div className={classes.buttonContainer}>\n              <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n                Submit\n              </Button>\n              <Button component={Link} to=\"/students\" variant=\"contained\">\n                Cancel\n              </Button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default NewStudentView;","/*==================================================\nCampusView.js\n\nThe Views component is responsible for rendering web page with data provided by the corresponding Container component.\nIt constructs a React component to display a single campus and its students (if any).\n================================================== */\n// Import react and react-router-dom necessary libraries\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// Take in props data to construct the component\nconst CampusView = (props) => {\n  const {campus} = props; // campus is an object containing campus data\n  \n  // Render a single Campus view with list of its students\n  return (\n    <div>\n  <h1>{campus.name}</h1>\n  <p>{campus.address}</p>\n  <p>{campus.description}</p>\n\n  {campus.students.length ? (\n    campus.students.map((student) => ( // student is an object containing student data\n      <div key={student.id}>\n        {/* Link into the Single Student page */}\n        <Link to={`/student/${student.id}`}>\n          <h2>{student.firstName} {student.lastName}</h2>\n        </Link>\n      </div>\n    ))\n  ) : (\n    <p>This campus currently has no students enrolled.</p>\n  )}\n</div>\n  );\n};\n\n// Export the component for use in other parts of the application\nexport default CampusView;","/*==================================================\nStudentView.js\n\nThe Views component is responsible for rendering web page with data provided by the corresponding Container component.\nIt constructs a React component to display the single student view page.\n================================================== */\n// Import react and react-router-dom necessary libraries\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// Take in props data to construct the component\nconst StudentView = (props) => {\n  const { student } = props; // student is an object containing student data\n\n  // Render a single Student view \n  return (\n    <div>\n      <h1>{student.firstName + \" \" + student.lastName}</h1>\n      {student.campus ? (\n  <h3>\n    {/* Link into the Single Campus page */}\n    Campus: <Link to={`/campus/${student.campus.id}`}>{student.campus.name}</Link>\n  </h3>\n) : (\n  <h3>This student is not enrolled in any campus.</h3>\n)}\n\n    </div>\n  );\n};\n\n// Export the component for use in other parts of the application\nexport default StudentView;","/*==================================================\nCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchCampusThunk } from \"../../store/thunks\";\n\nimport { CampusView } from \"../views\";\n\nclass CampusContainer extends Component {\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n\n  // Render a Campus view by passing campus data as props to the corresponding View component\n  render() {\n    return (\n      <div>\n        <Header />\n        <CampusView campus={this.props.campus} />\n      </div>\n    );\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\nconst mapState = (state) => {\n  return {\n    campus: state.campus,  // Get the State object from Reducer \"campus\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n  return {\n    fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n  };\n};\n\n// Export store-connected container by default\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(CampusContainer);","/*==================================================\nAllStudentsContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\n// Import React redux and React Router DOM libraries\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from \"react-router-dom\";\n\n// Import Redux Store and Thunks\nimport { \n  fetchAllStudentsThunk,\n  deleteStudentThunk\n} from '../../store/thunks';\n\n// Import the View component\nimport AllStudentsView from '../views/AllStudentsView';\n\n// Import the CSS file\nclass AllStudentsContainer extends Component {\n  // Get all students data from back-end database\n  componentDidMount() {\n    this.props.fetchAllStudents(); \n  }\n\n  // Handle delete student action\n  handleDelete = (studentId) => {\n    // Dispatch the thunk to delete a student\n    this.props.deleteStudent(studentId);\n  };\n\n  // Render All Students view by passing all students data as props to the corresponding View component\n  render() {\n    const { allStudents } = this.props;\n    return (\n      <div>\n        <Header />\n        {/* Pass both data and delete callback down to the View */}\n        <AllStudentsView \n          students={allStudents} \n          deleteStudent={this.handleDelete} \n        />\n      </div>\n    );\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllStudentsContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allStudents\".\nconst mapState = (state) => ({\n    allStudents: state.allStudents,  // Get the State object from Reducer \"allStudents\"\n});\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => ({\n    fetchAllStudents: () => dispatch(fetchAllStudentsThunk()),\n    deleteStudent: (studentId) => dispatch(deleteStudentThunk(studentId)), // Call the thunk to delete a student\n  });\n\n// Export store-connected container by default\n// AllStudentsContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default withRouter(connect(mapState, mapDispatch)(AllStudentsContainer));","/*==================================================\nStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchStudentThunk } from \"../../store/thunks\";\nimport { StudentView } from \"../views\";\n\nclass StudentContainer extends Component {\n  // Get student data from back-end database\n  componentDidMount() {\n    //getting student ID from url\n    this.props.fetchStudent(this.props.match.params.id);\n  }\n\n  // Render Student view by passing student data as props to the corresponding View component\n  render() {\n    return (\n      <div>\n        <Header />\n        <StudentView student={this.props.student} />\n      </div>\n    );\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"StudentContainer\" to connect to Redux Store.  \n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\nconst mapState = (state) => {\n  return {\n    student: state.student,  // Get the State object from Reducer \"student\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n  return {\n    fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\n  };\n};\n\n// Export store-connected container by default\n// StudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(StudentContainer);","/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk, fetchAllCampusesThunk } from '../../store/thunks';\n\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = {\n      firstname: \"\", \n      lastname: \"\",\n      email: \"\",\n      gpa: \"\",\n      imageUrl: \"\",\n      campusId: \"\",\n      redirect: false, \n      redirectId: null,\n      error: null\n    };\n  }\n\n  // Fetch all campuses when component mounts\n  componentDidMount() {\n    this.props.fetchAllCampuses();\n  }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n    try {\n      // Basic form validation\n      if (!this.state.firstname || !this.state.lastname || !this.state.email) {\n        this.setState({ error: \"First name, last name, and email are required fields\" });\n        return;\n      }\n\n      // Validate GPA is between 0 and 4.0\n      const gpa = parseFloat(this.state.gpa);\n      if (isNaN(gpa) || gpa < 0 || gpa > 4.0) {\n        this.setState({ error: \"GPA must be a number between 0 and 4.0\" });\n        return;\n      }\n\n      // Create student object to add\n      let student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        email: this.state.email,\n        gpa: gpa,\n        imageUrl: this.state.imageUrl || undefined, // Only include if provided\n        campusId: this.state.campusId || null // Use null if empty string\n      };\n      \n      // Add new student in back-end database\n      let newStudent = await this.props.addStudent(student);\n\n      if (newStudent && newStudent.id) {\n        // Update state, and trigger redirect to show the new student\n        this.setState({\n          firstname: \"\", \n          lastname: \"\", \n          email: \"\",\n          gpa: \"\",\n          imageUrl: \"\",\n          campusId: \"\",\n          redirect: true, \n          redirectId: newStudent.id,\n          error: null\n        });\n      } else {\n        this.setState({ error: \"Error adding student. Please try again.\" });\n      }\n    } catch (err) {\n      console.error(err);\n      this.setState({ error: \"An error occurred. Please try again.\" });\n    }\n  }\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({redirect: false, redirectId: null});\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if(this.state.redirect) {\n      return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n    }\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        {this.state.error && (\n          <div style={{color: 'red', textAlign: 'center', marginBottom: '20px'}}>\n            {this.state.error}\n          </div>\n        )}\n        <NewStudentView \n          handleChange={this.handleChange} \n          handleSubmit={this.handleSubmit}\n          allCampuses={this.props.allCampuses} \n        />\n      </div>          \n    );\n  }\n}\n\n// The following input arguments are passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapState\" argument is used to read values from the Redux Store and pass them as props\nconst mapState = (state) => {\n  return {\n    allCampuses: state.allCampuses  // Get the State object from Reducer \"allCampuses\"\n  };\n};\n\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n  return {\n    addStudent: (student) => dispatch(addStudentThunk(student)),\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk())\n  };\n};\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(NewStudentContainer);","/*==================================================\r\nNewCampusView.js\r\n\r\nThe Views component is responsible for rendering web page with data provided by the corresponding Container component.\r\nIt constructs a React component to display the new campus page.\r\n================================================== */\r\nimport React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { TextField } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// Create styling for the input form\r\nconst useStyles = makeStyles(() => ({\r\n  formContainer: {\r\n    width: '500px',\r\n    backgroundColor: '#f0f0f5',\r\n    borderRadius: '5px',\r\n    margin: 'auto',\r\n    padding: '20px',\r\n    boxShadow: '0px 0px 5px 0px rgba(0,0,0,0.15)'\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    textAlign: 'left',\r\n    textDecoration: 'none'\r\n  },\r\n  customizeAppBar: {\r\n    backgroundColor: '#11153e',\r\n    shadows: ['none'],\r\n  },\r\n  formTitle: {\r\n    backgroundColor: '#c5c8d6',\r\n    marginBottom: '15px',\r\n    textAlign: 'center',\r\n    borderRadius: '5px 5px 0px 0px',\r\n    padding: '10px'\r\n  },\r\n  formField: {\r\n    marginBottom: '15px',\r\n    width: '100%'\r\n  },\r\n  buttonContainer: {\r\n    marginTop: '20px',\r\n    display: 'flex',\r\n    justifyContent: 'space-between'\r\n  },\r\n  error: {\r\n    color: 'red',\r\n    fontSize: '0.8rem',\r\n    marginTop: '2px'\r\n  }\r\n}));\r\n\r\nconst NewCampusView = (props) => {\r\n  const { \r\n    handleChange, \r\n    handleSubmit,\r\n    errors,\r\n    values\r\n  } = props;\r\n  \r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <h1>New Campus</h1>\r\n\r\n      <div className={classes.root}>\r\n        <div className={classes.formContainer}>\r\n          <div className={classes.formTitle}>\r\n            <Typography style={{ fontWeight: 'bold', fontFamily: 'Courier, sans-serif', fontSize: '20px', color: '#11153e' }}>\r\n              Add a Campus\r\n            </Typography>\r\n          </div>\r\n          <form style={{ textAlign: 'left' }} onSubmit={(e) => handleSubmit(e)}>\r\n            <TextField\r\n              className={classes.formField}\r\n              label=\"Campus Name\"\r\n              name=\"name\"\r\n              variant=\"outlined\"\r\n              value={values.name}\r\n              onChange={(e) => handleChange(e)}\r\n              error={!!errors.name}\r\n              helperText={errors.name}\r\n              required\r\n            />\r\n\r\n            <TextField\r\n              className={classes.formField}\r\n              label=\"Campus Address\"\r\n              name=\"address\"\r\n              variant=\"outlined\"\r\n              value={values.address}\r\n              onChange={(e) => handleChange(e)}\r\n              error={!!errors.address}\r\n              helperText={errors.address}\r\n              required\r\n            />\r\n\r\n            <TextField\r\n              className={classes.formField}\r\n              label=\"Description\"\r\n              name=\"description\"\r\n              variant=\"outlined\"\r\n              multiline\r\n              rows={4}\r\n              value={values.description}\r\n              onChange={(e) => handleChange(e)}\r\n              error={!!errors.description}\r\n              helperText={errors.description}\r\n              required\r\n            />\r\n\r\n            <TextField\r\n              className={classes.formField}\r\n              label=\"Image URL\"\r\n              name=\"imageUrl\"\r\n              variant=\"outlined\"\r\n              value={values.imageUrl}\r\n              onChange={(e) => handleChange(e)}\r\n              error={!!errors.imageUrl}\r\n              helperText={errors.imageUrl || \"Enter a URL for the campus image\"}\r\n            />\r\n\r\n            <div className={classes.buttonContainer}>\r\n              <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                Submit\r\n              </Button>\r\n              <Button component={Link} to=\"/campuses\" variant=\"contained\">\r\n                Cancel\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewCampusView;","/*==================================================\r\nNewCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport NewCampusView from '../views/NewCampusView';\r\nimport { addCampusThunk } from '../../store/thunks';\r\n\r\nclass NewCampusContainer extends Component {\r\n  // Initialize state\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // Form values\r\n      name: '',\r\n      address: '',\r\n      description: '',\r\n      imageUrl: '',\r\n      // Form errors\r\n      errors: {\r\n        name: '',\r\n        address: '',\r\n        description: '',\r\n        imageUrl: ''\r\n      },\r\n      // Redirect after submission\r\n      redirect: false,\r\n      redirectId: null,\r\n      // General error\r\n      submitError: null\r\n    };\r\n  }\r\n\r\n  // Validate form fields\r\n  validateField = (name, value) => {\r\n    let errors = { ...this.state.errors };\r\n    \r\n    switch (name) {\r\n      case 'name':\r\n        errors.name = \r\n          value.trim().length === 0\r\n            ? 'Campus name is required'\r\n            : value.trim().length < 2\r\n              ? 'Campus name must be at least 2 characters'\r\n              : '';\r\n        break;\r\n      case 'address':\r\n        errors.address = \r\n          value.trim().length === 0\r\n            ? 'Address is required'\r\n            : '';\r\n        break;\r\n      case 'description':\r\n        errors.description = \r\n          value.trim().length === 0\r\n            ? 'Description is required'\r\n            : '';\r\n        break;\r\n      case 'imageUrl':\r\n        if (value.trim().length > 0) {\r\n          try {\r\n            new URL(value);\r\n            errors.imageUrl = '';\r\n          } catch (error) {\r\n            errors.imageUrl = 'Please enter a valid URL';\r\n          }\r\n        } else {\r\n          errors.imageUrl = '';\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return errors;\r\n  };\r\n\r\n  // Validate entire form\r\n  validateForm = () => {\r\n    let valid = true;\r\n    const fields = ['name', 'address', 'description'];\r\n    \r\n    // Check required fields\r\n    fields.forEach(field => {\r\n      if (this.state[field].trim().length === 0) {\r\n        const errors = this.validateField(field, this.state[field]);\r\n        this.setState({ errors });\r\n        valid = false;\r\n      }\r\n    });\r\n\r\n    // Check imageUrl if it's not empty\r\n    if (this.state.imageUrl.trim().length > 0) {\r\n      try {\r\n        new URL(this.state.imageUrl);\r\n      } catch (error) {\r\n        const errors = this.validateField('imageUrl', this.state.imageUrl);\r\n        this.setState({ errors });\r\n        valid = false;\r\n      }\r\n    }\r\n\r\n    return valid;\r\n  };\r\n\r\n  // Capture input data when it is entered\r\n  handleChange = event => {\r\n    const { name, value } = event.target;\r\n    \r\n    this.setState(prevState => ({\r\n      [name]: value,\r\n      errors: {\r\n        ...prevState.errors,\r\n        [name]: this.validateField(name, value)[name]\r\n      }\r\n    }));\r\n  };\r\n\r\n  // Take action after user clicks the submit button\r\n  handleSubmit = async event => {\r\n    event.preventDefault();  // Prevent browser reload/refresh after submit\r\n\r\n    if (!this.validateForm()) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Create a new campus object\r\n      const campus = {\r\n        name: this.state.name,\r\n        address: this.state.address,\r\n        description: this.state.description,\r\n        imageUrl: this.state.imageUrl || undefined // Only include if provided\r\n      };\r\n      \r\n      // Add new campus to database\r\n      let newCampus = await this.props.addCampus(campus);\r\n\r\n      // Update state, and trigger redirect to the new campus page\r\n      this.setState({\r\n        name: '',\r\n        address: '',\r\n        description: '',\r\n        imageUrl: '',\r\n        redirect: true,\r\n        redirectId: newCampus.id,\r\n        submitError: null\r\n      });\r\n    } catch (err) {\r\n      this.setState({\r\n        submitError: 'An error occurred while adding the campus. Please try again.'\r\n      });\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  // Unmount when the component is being removed from the DOM\r\n  componentWillUnmount() {\r\n    this.setState({redirect: false, redirectId: null});\r\n  }\r\n\r\n  // Render new campus input form\r\n  render() {\r\n    // Redirect to new campus's page after submit\r\n    if (this.state.redirect) {\r\n      return (<Redirect to={`/campus/${this.state.redirectId}`}/>);\r\n    }\r\n\r\n    // Display the input form via the corresponding View component\r\n    return (\r\n      <div>\r\n        <Header />\r\n        {this.state.submitError && (\r\n          <div style={{color: 'red', textAlign: 'center', marginBottom: '20px'}}>\r\n            {this.state.submitError}\r\n          </div>\r\n        )}\r\n        <NewCampusView\r\n          handleChange={this.handleChange}\r\n          handleSubmit={this.handleSubmit}\r\n          errors={this.state.errors}\r\n          values={{\r\n            name: this.state.name,\r\n            address: this.state.address,\r\n            description: this.state.description,\r\n            imageUrl: this.state.imageUrl\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Map dispatch to props\r\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    addCampus: (campus) => dispatch(addCampusThunk(campus))\r\n  };\r\n};\r\n\r\n// Export store-connected container by default\r\n// NewCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(null, mapDispatch)(NewCampusContainer);","import \"./App.css\";\n\n//Router\nimport { Switch, Route } from \"react-router-dom\";\n//Components\nimport {\n  HomePageContainer,\n  CampusContainer,\n  StudentContainer,\n  AllCampusesContainer,\n  AllStudentsContainer,\n  NewStudentContainer,\n  NewCampusContainer,\n} from \"./components/containers\";\n\nconst App = () => (\n  <div className=\"App\">\n    <Switch>\n      <Route exact path=\"/\" component={HomePageContainer} />\n      <Route exact path=\"/campuses\" component={AllCampusesContainer} />\n      <Route exact path=\"/campus/:id\" component={CampusContainer} />\n      <Route exact path=\"/campuses/new\" component={NewCampusContainer} />\n      <Route exact path=\"/students\" component={AllStudentsContainer} />\n      <Route exact path=\"/newstudent\" component={NewStudentContainer} />\n      <Route exact path=\"/student/:id\" component={StudentContainer} />\n    </Switch>\n  </div>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/*==================================================\n/src/store/reducers/campuses.js\n\nThis is a Reducer function that accepts 2 parameters: the previous state object (aka current state) and an action object. \nDepending on the Action object, the Reducer updates the State and return the new State object.\nIt also defines the State and its default initial value.\n================================================== */\nimport * as at from \"../actions/actionTypes\";  // Import Action Types (\"at\" keyword for Action Type)\n\n// REDUCER:\nconst allCampuses = (state = [], action) => {  // Empty array as default Initial State\n  switch (action.type) {\n    case at.FETCH_ALL_CAMPUSES:\n      return action.payload;\n    case at.ADD_CAMPUS:\n      return [...state, action.payload];  // Add new campus to existing array\n    case at.DELETE_CAMPUS:\n      return state.filter(campus => campus.id !== action.payload);  // Filter out deleted campus\n    case at.EDIT_CAMPUS:\n      return state.map(campus => {\n        return campus.id === action.payload.id ? action.payload : campus;\n      });  // Update campus with matching id\n    default:\n      // If the Reducer doesn't recognize the Action Type, returns the previous (current) State unchanged.\n      return state;\n  }\n};\n\nexport default allCampuses;","/*==================================================\n/src/store/reducers/campus.js\n\nThis is a Reducer function that accepts 2 parameters: the previous state object (aka current state) and an action object. \nDepending on the Action object, the Reducer updates the State and return the new State object.\nIt also defines the State and its default initial value.\n================================================== */\nimport { FETCH_CAMPUS } from \"../actions/actionTypes\";  // Import Action Type\n\n// Define default Initial State\nconst initialState = {\n  students: [],  // Empty students array\n};\n\n// REDUCER:\nconst campus = (state = initialState, action) => {  // Use \"initialState\" as default Initial State\n  switch (action.type) {\n    case FETCH_CAMPUS:\n      return action.payload;\n    default:\n      // If the Reducer doesn't recognize the Action Type, returns the previous (current) State unchanged.\n      return state;\n  }\n};\n\nexport default campus;","/*==================================================\n/src/store/reducers/students.js\n\nThis is a Reducer function that accepts 2 parameters: the previous state object (aka current state) and an action object. \nDepending on the Action object, the Reducer updates the State and return the new State object.\nIt also defines the State and its default initial value.\n================================================== */\nimport * as at from \"../actions/actionTypes\";  // Import Action Types (\"at\" keyword for Action Type)\n\n// REDUCER:\nconst allStudents = (state=[], action) => {  // Empty array as default Initial State\n  switch (action.type) {\n    case at.FETCH_ALL_STUDENTS:\n      return action.payload;\n    case at.ADD_STUDENT:\n      return [...state, action.payload]\n    case at.DELETE_STUDENT:\n      return state.filter(student => student.id!==action.payload);\n    case at.EDIT_STUDENT:\n      return state.map(student => { \n        return (\n          student.id===action.payload.id ? action.payload : student\n        );\n      });\n    default:\n      // If the Reducer doesn't recognize the Action Type, returns the previous (current) State unchanged.\n      return state;\n  }\n};\n\nexport default allStudents;","/*==================================================\n/src/store/reducers/student.js\n\nThis is a Reducer function that accepts 2 parameters: the previous state object (aka current state) and an action object. \nDepending on the Action object, the Reducer updates the State and return the new State object.\nIt also defines the State and its default initial value.\n================================================== */\nimport { FETCH_STUDENT } from \"../actions/actionTypes\";  // Import Action Type\n\n// Define default Initial state\nconst initialState = {\n  campus: {},  // Empty object\n};\n\n// REDUCER:\nconst student = (state=initialState, action) => {  // Use \"initialState\" as default Initial State\n  switch (action.type) {\n    case FETCH_STUDENT:\n      return action.payload;\n    default:\n      // If the Reducer doesn't recognize the Action Type, returns the previous (current) State unchanged.\n      return state;\n  }\n};\n\nexport default student;","/*==================================================\n/src/store/index.js\n\nIt contains the necessities and accessories for constructing the Redux Store.\nIt creates a single Redux Store that holds the complete state tree of the app, so that the Redux Store state can access the states in all Reducers. \n================================================== */\nimport { combineReducers, applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\n\n// Import all Reducers from the barrel file (/src/store/reducers/index.js)\nimport * as reducers from './reducers';\n\n// Construct the Redux Store:\n// Create a single Root Reducer to combine all Reducers, so that the Redux Store state can \n// access the states in all Reducers of the app.\nconst rootReducer = combineReducers(reducers);  \n// Create a logger middleware to log dispatched Actions in console,\n// so that it displays prevState, nextState, and Action when an Action is dispatched.\nconst logger = createLogger({ collapsed: true });  // Collapse console messages when displayed\n// Create a Redux Store using Root Reducer and a middleware pipeline consisting of Thunk and logger.\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\n// Export the Redux Store by default, which will be provided to and injected within our entire application\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Redux\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\n// Router\nimport { BrowserRouter } from \"react-router-dom\";\n\n// The Provider component makes the Redux Store available to any nested components that need to access the Redux Store. \n// The BrowserRouter component sets a common basename for the nested Routes.\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}